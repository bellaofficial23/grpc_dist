// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: proto/file_processor.proto
// Protobuf C++ Version: 6.31.1

#include "proto/file_processor.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace file_processor {

inline constexpr ResizeImageRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        width_{0},
        height_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ResizeImageRequest::ResizeImageRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ResizeImageRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ResizeImageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResizeImageRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResizeImageRequestDefaultTypeInternal() {}
  union {
    ResizeImageRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResizeImageRequestDefaultTypeInternal _ResizeImageRequest_default_instance_;

inline constexpr FileChunk::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        content_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        filename_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        success_{false},
        is_last_chunk_{false} {}

template <typename>
PROTOBUF_CONSTEXPR FileChunk::FileChunk(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(FileChunk_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FileChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileChunkDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileChunkDefaultTypeInternal() {}
  union {
    FileChunk _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileChunkDefaultTypeInternal _FileChunk_default_instance_;

inline constexpr ImageStreamRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : request_type_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR ImageStreamRequest::ImageStreamRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ImageStreamRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ImageStreamRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageStreamRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageStreamRequestDefaultTypeInternal() {}
  union {
    ImageStreamRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageStreamRequestDefaultTypeInternal _ImageStreamRequest_default_instance_;
}  // namespace file_processor
static constexpr const ::_pb::EnumDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_enum_descriptors_proto_2ffile_5fprocessor_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_proto_2ffile_5fprocessor_2eproto = nullptr;
const ::uint32_t
    TableStruct_proto_2ffile_5fprocessor_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::file_processor::FileChunk, _impl_._has_bits_),
        7, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::file_processor::FileChunk, _impl_.content_),
        PROTOBUF_FIELD_OFFSET(::file_processor::FileChunk, _impl_.filename_),
        PROTOBUF_FIELD_OFFSET(::file_processor::FileChunk, _impl_.success_),
        PROTOBUF_FIELD_OFFSET(::file_processor::FileChunk, _impl_.is_last_chunk_),
        0,
        1,
        2,
        3,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::file_processor::ResizeImageRequest, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::file_processor::ResizeImageRequest, _impl_.width_),
        PROTOBUF_FIELD_OFFSET(::file_processor::ResizeImageRequest, _impl_.height_),
        0,
        1,
        0x004, // bitmap
        PROTOBUF_FIELD_OFFSET(::file_processor::ImageStreamRequest, _impl_._oneof_case_[0]),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::file_processor::ImageStreamRequest, _impl_.request_type_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::file_processor::FileChunk)},
        {11, sizeof(::file_processor::ResizeImageRequest)},
        {18, sizeof(::file_processor::ImageStreamRequest)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::file_processor::_FileChunk_default_instance_._instance,
    &::file_processor::_ResizeImageRequest_default_instance_._instance,
    &::file_processor::_ImageStreamRequest_default_instance_._instance,
};
const char descriptor_table_protodef_proto_2ffile_5fprocessor_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\032proto/file_processor.proto\022\016file_proce"
    "ssor\"V\n\tFileChunk\022\017\n\007content\030\001 \001(\014\022\020\n\010fi"
    "lename\030\002 \001(\t\022\017\n\007success\030\003 \001(\010\022\025\n\ris_last"
    "_chunk\030\004 \001(\010\"3\n\022ResizeImageRequest\022\r\n\005wi"
    "dth\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\"\232\001\n\022ImageStrea"
    "mRequest\022\020\n\006format\030\001 \001(\tH\000\0226\n\010metadata\030\002"
    " \001(\0132\".file_processor.ResizeImageRequest"
    "H\000\022*\n\005chunk\030\003 \001(\0132\031.file_processor.FileC"
    "hunkH\000B\016\n\014request_type2\324\002\n\024FileProcessor"
    "Service\022G\n\013CompressPDF\022\031.file_processor."
    "FileChunk\032\031.file_processor.FileChunk(\0010\001"
    "\022H\n\014ConvertToTXT\022\031.file_processor.FileCh"
    "unk\032\031.file_processor.FileChunk(\0010\001\022W\n\022Co"
    "nvertImageFormat\022\".file_processor.ImageS"
    "treamRequest\032\031.file_processor.FileChunk("
    "\0010\001\022P\n\013ResizeImage\022\".file_processor.Imag"
    "eStreamRequest\032\031.file_processor.FileChun"
    "k(\0010\001b\006proto3"
};
static ::absl::once_flag descriptor_table_proto_2ffile_5fprocessor_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_proto_2ffile_5fprocessor_2eproto = {
    false,
    false,
    693,
    descriptor_table_protodef_proto_2ffile_5fprocessor_2eproto,
    "proto/file_processor.proto",
    &descriptor_table_proto_2ffile_5fprocessor_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_proto_2ffile_5fprocessor_2eproto::offsets,
    file_level_enum_descriptors_proto_2ffile_5fprocessor_2eproto,
    file_level_service_descriptors_proto_2ffile_5fprocessor_2eproto,
};
namespace file_processor {
// ===================================================================

class FileChunk::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<FileChunk>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(FileChunk, _impl_._has_bits_);
};

FileChunk::FileChunk(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, FileChunk_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:file_processor.FileChunk)
}
PROTOBUF_NDEBUG_INLINE FileChunk::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::file_processor::FileChunk& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        content_(arena, from.content_),
        filename_(arena, from.filename_) {}

FileChunk::FileChunk(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const FileChunk& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, FileChunk_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  FileChunk* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, success_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, success_),
           offsetof(Impl_, is_last_chunk_) -
               offsetof(Impl_, success_) +
               sizeof(Impl_::is_last_chunk_));

  // @@protoc_insertion_point(copy_constructor:file_processor.FileChunk)
}
PROTOBUF_NDEBUG_INLINE FileChunk::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        content_(arena),
        filename_(arena) {}

inline void FileChunk::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, success_),
           0,
           offsetof(Impl_, is_last_chunk_) -
               offsetof(Impl_, success_) +
               sizeof(Impl_::is_last_chunk_));
}
FileChunk::~FileChunk() {
  // @@protoc_insertion_point(destructor:file_processor.FileChunk)
  SharedDtor(*this);
}
inline void FileChunk::SharedDtor(MessageLite& self) {
  FileChunk& this_ = static_cast<FileChunk&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.content_.Destroy();
  this_._impl_.filename_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL FileChunk::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) FileChunk(arena);
}
constexpr auto FileChunk::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(FileChunk),
                                            alignof(FileChunk));
}
constexpr auto FileChunk::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_FileChunk_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &FileChunk::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<FileChunk>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &FileChunk::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<FileChunk>(), &FileChunk::ByteSizeLong,
              &FileChunk::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(FileChunk, _impl_._cached_size_),
          false,
      },
      &FileChunk::kDescriptorMethods,
      &descriptor_table_proto_2ffile_5fprocessor_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull FileChunk_class_data_ =
        FileChunk::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
FileChunk::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&FileChunk_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(FileChunk_class_data_.tc_table);
  return FileChunk_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 41, 2>
FileChunk::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FileChunk, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    FileChunk_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::file_processor::FileChunk>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool is_last_chunk = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(FileChunk, _impl_.is_last_chunk_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(FileChunk, _impl_.is_last_chunk_)}},
    // bytes content = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(FileChunk, _impl_.content_)}},
    // string filename = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(FileChunk, _impl_.filename_)}},
    // bool success = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(FileChunk, _impl_.success_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(FileChunk, _impl_.success_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes content = 1;
    {PROTOBUF_FIELD_OFFSET(FileChunk, _impl_.content_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // string filename = 2;
    {PROTOBUF_FIELD_OFFSET(FileChunk, _impl_.filename_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool success = 3;
    {PROTOBUF_FIELD_OFFSET(FileChunk, _impl_.success_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool is_last_chunk = 4;
    {PROTOBUF_FIELD_OFFSET(FileChunk, _impl_.is_last_chunk_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\30\0\10\0\0\0\0\0"
    "file_processor.FileChunk"
    "filename"
  }},
};
PROTOBUF_NOINLINE void FileChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:file_processor.FileChunk)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.content_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.filename_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&_impl_.success_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_last_chunk_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.is_last_chunk_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL FileChunk::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const FileChunk& this_ = static_cast<const FileChunk&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL FileChunk::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const FileChunk& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:file_processor.FileChunk)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bytes content = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_content().empty()) {
      const ::std::string& _s = this_._internal_content();
      target = stream->WriteBytesMaybeAliased(1, _s, target);
    }
  }

  // string filename = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_filename().empty()) {
      const ::std::string& _s = this_._internal_filename();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "file_processor.FileChunk.filename");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // bool success = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_success() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          3, this_._internal_success(), target);
    }
  }

  // bool is_last_chunk = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_is_last_chunk() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          4, this_._internal_is_last_chunk(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:file_processor.FileChunk)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t FileChunk::ByteSizeLong(const MessageLite& base) {
  const FileChunk& this_ = static_cast<const FileChunk&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t FileChunk::ByteSizeLong() const {
  const FileChunk& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:file_processor.FileChunk)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // bytes content = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_content().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_content());
      }
    }
    // string filename = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_filename().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_filename());
      }
    }
    // bool success = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_success() != 0) {
        total_size += 2;
      }
    }
    // bool is_last_chunk = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_is_last_chunk() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void FileChunk::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FileChunk*>(&to_msg);
  auto& from = static_cast<const FileChunk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:file_processor.FileChunk)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_content().empty()) {
        _this->_internal_set_content(from._internal_content());
      } else {
        if (_this->_impl_.content_.IsDefault()) {
          _this->_internal_set_content("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_filename().empty()) {
        _this->_internal_set_filename(from._internal_filename());
      } else {
        if (_this->_impl_.filename_.IsDefault()) {
          _this->_internal_set_filename("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_success() != 0) {
        _this->_impl_.success_ = from._impl_.success_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_is_last_chunk() != 0) {
        _this->_impl_.is_last_chunk_ = from._impl_.is_last_chunk_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FileChunk::CopyFrom(const FileChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:file_processor.FileChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void FileChunk::InternalSwap(FileChunk* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.content_, &other->_impl_.content_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.filename_, &other->_impl_.filename_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileChunk, _impl_.is_last_chunk_)
      + sizeof(FileChunk::_impl_.is_last_chunk_)
      - PROTOBUF_FIELD_OFFSET(FileChunk, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::google::protobuf::Metadata FileChunk::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ResizeImageRequest::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ResizeImageRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ResizeImageRequest, _impl_._has_bits_);
};

ResizeImageRequest::ResizeImageRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ResizeImageRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:file_processor.ResizeImageRequest)
}
ResizeImageRequest::ResizeImageRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ResizeImageRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ResizeImageRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE ResizeImageRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void ResizeImageRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, width_),
           0,
           offsetof(Impl_, height_) -
               offsetof(Impl_, width_) +
               sizeof(Impl_::height_));
}
ResizeImageRequest::~ResizeImageRequest() {
  // @@protoc_insertion_point(destructor:file_processor.ResizeImageRequest)
  SharedDtor(*this);
}
inline void ResizeImageRequest::SharedDtor(MessageLite& self) {
  ResizeImageRequest& this_ = static_cast<ResizeImageRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ResizeImageRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ResizeImageRequest(arena);
}
constexpr auto ResizeImageRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ResizeImageRequest),
                                            alignof(ResizeImageRequest));
}
constexpr auto ResizeImageRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ResizeImageRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ResizeImageRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ResizeImageRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ResizeImageRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ResizeImageRequest>(), &ResizeImageRequest::ByteSizeLong,
              &ResizeImageRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ResizeImageRequest, _impl_._cached_size_),
          false,
      },
      &ResizeImageRequest::kDescriptorMethods,
      &descriptor_table_proto_2ffile_5fprocessor_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ResizeImageRequest_class_data_ =
        ResizeImageRequest::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ResizeImageRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ResizeImageRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ResizeImageRequest_class_data_.tc_table);
  return ResizeImageRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2>
ResizeImageRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ResizeImageRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ResizeImageRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::file_processor::ResizeImageRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 height = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ResizeImageRequest, _impl_.height_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(ResizeImageRequest, _impl_.height_)}},
    // int32 width = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ResizeImageRequest, _impl_.width_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(ResizeImageRequest, _impl_.width_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 width = 1;
    {PROTOBUF_FIELD_OFFSET(ResizeImageRequest, _impl_.width_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 height = 2;
    {PROTOBUF_FIELD_OFFSET(ResizeImageRequest, _impl_.height_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void ResizeImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:file_processor.ResizeImageRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    ::memset(&_impl_.width_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.height_) -
        reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ResizeImageRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ResizeImageRequest& this_ = static_cast<const ResizeImageRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ResizeImageRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ResizeImageRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:file_processor.ResizeImageRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 width = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_width() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<1>(
              stream, this_._internal_width(), target);
    }
  }

  // int32 height = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_height() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
              stream, this_._internal_height(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:file_processor.ResizeImageRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ResizeImageRequest::ByteSizeLong(const MessageLite& base) {
  const ResizeImageRequest& this_ = static_cast<const ResizeImageRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ResizeImageRequest::ByteSizeLong() const {
  const ResizeImageRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:file_processor.ResizeImageRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // int32 width = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_width() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_width());
      }
    }
    // int32 height = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_height() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_height());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ResizeImageRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ResizeImageRequest*>(&to_msg);
  auto& from = static_cast<const ResizeImageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:file_processor.ResizeImageRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (from._internal_width() != 0) {
        _this->_impl_.width_ = from._impl_.width_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_height() != 0) {
        _this->_impl_.height_ = from._impl_.height_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ResizeImageRequest::CopyFrom(const ResizeImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:file_processor.ResizeImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ResizeImageRequest::InternalSwap(ResizeImageRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResizeImageRequest, _impl_.height_)
      + sizeof(ResizeImageRequest::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(ResizeImageRequest, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

::google::protobuf::Metadata ResizeImageRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ImageStreamRequest::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::file_processor::ImageStreamRequest, _impl_._oneof_case_);
};

void ImageStreamRequest::set_allocated_metadata(::file_processor::ResizeImageRequest* PROTOBUF_NULLABLE metadata) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_request_type();
  if (metadata) {
    ::google::protobuf::Arena* submessage_arena = metadata->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::google::protobuf::internal::GetOwnedMessage(message_arena, metadata, submessage_arena);
    }
    set_has_metadata();
    _impl_.request_type_.metadata_ = metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:file_processor.ImageStreamRequest.metadata)
}
void ImageStreamRequest::set_allocated_chunk(::file_processor::FileChunk* PROTOBUF_NULLABLE chunk) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_request_type();
  if (chunk) {
    ::google::protobuf::Arena* submessage_arena = chunk->GetArena();
    if (message_arena != submessage_arena) {
      chunk = ::google::protobuf::internal::GetOwnedMessage(message_arena, chunk, submessage_arena);
    }
    set_has_chunk();
    _impl_.request_type_.chunk_ = chunk;
  }
  // @@protoc_insertion_point(field_set_allocated:file_processor.ImageStreamRequest.chunk)
}
ImageStreamRequest::ImageStreamRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ImageStreamRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:file_processor.ImageStreamRequest)
}
PROTOBUF_NDEBUG_INLINE ImageStreamRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::file_processor::ImageStreamRequest& from_msg)
      : request_type_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

ImageStreamRequest::ImageStreamRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ImageStreamRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ImageStreamRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ImageStreamRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (request_type_case()) {
    case REQUEST_TYPE_NOT_SET:
      break;
      case kFormat:
        new (&_impl_.request_type_.format_) decltype(_impl_.request_type_.format_){arena, from._impl_.request_type_.format_};
        break;
      case kMetadata:
        _impl_.request_type_.metadata_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.request_type_.metadata_);
        break;
      case kChunk:
        _impl_.request_type_.chunk_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.request_type_.chunk_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:file_processor.ImageStreamRequest)
}
PROTOBUF_NDEBUG_INLINE ImageStreamRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : request_type_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void ImageStreamRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ImageStreamRequest::~ImageStreamRequest() {
  // @@protoc_insertion_point(destructor:file_processor.ImageStreamRequest)
  SharedDtor(*this);
}
inline void ImageStreamRequest::SharedDtor(MessageLite& self) {
  ImageStreamRequest& this_ = static_cast<ImageStreamRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_request_type()) {
    this_.clear_request_type();
  }
  this_._impl_.~Impl_();
}

void ImageStreamRequest::clear_request_type() {
// @@protoc_insertion_point(one_of_clear_start:file_processor.ImageStreamRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (request_type_case()) {
    case kFormat: {
      _impl_.request_type_.format_.Destroy();
      break;
    }
    case kMetadata: {
      if (GetArena() == nullptr) {
        delete _impl_.request_type_.metadata_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.request_type_.metadata_);
      }
      break;
    }
    case kChunk: {
      if (GetArena() == nullptr) {
        delete _impl_.request_type_.chunk_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.request_type_.chunk_);
      }
      break;
    }
    case REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REQUEST_TYPE_NOT_SET;
}


inline void* PROTOBUF_NONNULL ImageStreamRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ImageStreamRequest(arena);
}
constexpr auto ImageStreamRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ImageStreamRequest),
                                            alignof(ImageStreamRequest));
}
constexpr auto ImageStreamRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ImageStreamRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ImageStreamRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ImageStreamRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ImageStreamRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ImageStreamRequest>(), &ImageStreamRequest::ByteSizeLong,
              &ImageStreamRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ImageStreamRequest, _impl_._cached_size_),
          false,
      },
      &ImageStreamRequest::kDescriptorMethods,
      &descriptor_table_proto_2ffile_5fprocessor_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ImageStreamRequest_class_data_ =
        ImageStreamRequest::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ImageStreamRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ImageStreamRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ImageStreamRequest_class_data_.tc_table);
  return ImageStreamRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 3, 2, 48, 2>
ImageStreamRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    ImageStreamRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::file_processor::ImageStreamRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string format = 1;
    {PROTOBUF_FIELD_OFFSET(ImageStreamRequest, _impl_.request_type_.format_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .file_processor.ResizeImageRequest metadata = 2;
    {PROTOBUF_FIELD_OFFSET(ImageStreamRequest, _impl_.request_type_.metadata_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .file_processor.FileChunk chunk = 3;
    {PROTOBUF_FIELD_OFFSET(ImageStreamRequest, _impl_.request_type_.chunk_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::file_processor::ResizeImageRequest>()},
      {::_pbi::TcParser::GetTable<::file_processor::FileChunk>()},
  }},
  {{
    "\41\6\0\0\0\0\0\0"
    "file_processor.ImageStreamRequest"
    "format"
  }},
};
PROTOBUF_NOINLINE void ImageStreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:file_processor.ImageStreamRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request_type();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ImageStreamRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ImageStreamRequest& this_ = static_cast<const ImageStreamRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ImageStreamRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ImageStreamRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:file_processor.ImageStreamRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (this_.request_type_case()) {
    case kFormat: {
      const ::std::string& _s = this_._internal_format();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "file_processor.ImageStreamRequest.format");
      target = stream->WriteStringMaybeAliased(1, _s, target);
      break;
    }
    case kMetadata: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, *this_._impl_.request_type_.metadata_, this_._impl_.request_type_.metadata_->GetCachedSize(), target,
          stream);
      break;
    }
    case kChunk: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, *this_._impl_.request_type_.chunk_, this_._impl_.request_type_.chunk_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:file_processor.ImageStreamRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ImageStreamRequest::ByteSizeLong(const MessageLite& base) {
  const ImageStreamRequest& this_ = static_cast<const ImageStreamRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ImageStreamRequest::ByteSizeLong() const {
  const ImageStreamRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:file_processor.ImageStreamRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  switch (this_.request_type_case()) {
    // string format = 1;
    case kFormat: {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_format());
      break;
    }
    // .file_processor.ResizeImageRequest metadata = 2;
    case kMetadata: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.request_type_.metadata_);
      break;
    }
    // .file_processor.FileChunk chunk = 3;
    case kChunk: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.request_type_.chunk_);
      break;
    }
    case REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ImageStreamRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ImageStreamRequest*>(&to_msg);
  auto& from = static_cast<const ImageStreamRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:file_processor.ImageStreamRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_request_type();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kFormat: {
        if (oneof_needs_init) {
          _this->_impl_.request_type_.format_.InitDefault();
        }
        _this->_impl_.request_type_.format_.Set(from._internal_format(), arena);
        break;
      }
      case kMetadata: {
        if (oneof_needs_init) {
          _this->_impl_.request_type_.metadata_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.request_type_.metadata_);
        } else {
          _this->_impl_.request_type_.metadata_->MergeFrom(*from._impl_.request_type_.metadata_);
        }
        break;
      }
      case kChunk: {
        if (oneof_needs_init) {
          _this->_impl_.request_type_.chunk_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.request_type_.chunk_);
        } else {
          _this->_impl_.request_type_.chunk_->MergeFrom(*from._impl_.request_type_.chunk_);
        }
        break;
      }
      case REQUEST_TYPE_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ImageStreamRequest::CopyFrom(const ImageStreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:file_processor.ImageStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ImageStreamRequest::InternalSwap(ImageStreamRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.request_type_, other->_impl_.request_type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata ImageStreamRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace file_processor
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_proto_2ffile_5fprocessor_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
