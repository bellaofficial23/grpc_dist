// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: proto/file_processor.proto
// Protobuf C++ Version: 6.31.1

#ifndef proto_2ffile_5fprocessor_2eproto_2epb_2eh
#define proto_2ffile_5fprocessor_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proto_2ffile_5fprocessor_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2ffile_5fprocessor_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_proto_2ffile_5fprocessor_2eproto;
}  // extern "C"
namespace file_processor {
class FileChunk;
struct FileChunkDefaultTypeInternal;
extern FileChunkDefaultTypeInternal _FileChunk_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull FileChunk_class_data_;
class ImageStreamRequest;
struct ImageStreamRequestDefaultTypeInternal;
extern ImageStreamRequestDefaultTypeInternal _ImageStreamRequest_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ImageStreamRequest_class_data_;
class ResizeImageRequest;
struct ResizeImageRequestDefaultTypeInternal;
extern ResizeImageRequestDefaultTypeInternal _ResizeImageRequest_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ResizeImageRequest_class_data_;
}  // namespace file_processor
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace file_processor {

// ===================================================================


// -------------------------------------------------------------------

class ResizeImageRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:file_processor.ResizeImageRequest) */ {
 public:
  inline ResizeImageRequest() : ResizeImageRequest(nullptr) {}
  ~ResizeImageRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResizeImageRequest* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResizeImageRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResizeImageRequest(::google::protobuf::internal::ConstantInitialized);

  inline ResizeImageRequest(const ResizeImageRequest& from) : ResizeImageRequest(nullptr, from) {}
  inline ResizeImageRequest(ResizeImageRequest&& from) noexcept
      : ResizeImageRequest(nullptr, ::std::move(from)) {}
  inline ResizeImageRequest& operator=(const ResizeImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResizeImageRequest& operator=(ResizeImageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResizeImageRequest& default_instance() {
    return *reinterpret_cast<const ResizeImageRequest*>(
        &_ResizeImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ResizeImageRequest& a, ResizeImageRequest& b) { a.Swap(&b); }
  inline void Swap(ResizeImageRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResizeImageRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResizeImageRequest* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResizeImageRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResizeImageRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResizeImageRequest& from) { ResizeImageRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResizeImageRequest* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "file_processor.ResizeImageRequest"; }

 protected:
  explicit ResizeImageRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ResizeImageRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ResizeImageRequest& from);
  ResizeImageRequest(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ResizeImageRequest&& from) noexcept
      : ResizeImageRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // int32 width = 1;
  void clear_width() ;
  ::int32_t width() const;
  void set_width(::int32_t value);

  private:
  ::int32_t _internal_width() const;
  void _internal_set_width(::int32_t value);

  public:
  // int32 height = 2;
  void clear_height() ;
  ::int32_t height() const;
  void set_height(::int32_t value);

  private:
  ::int32_t _internal_height() const;
  void _internal_set_height(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:file_processor.ResizeImageRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ResizeImageRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t width_;
    ::int32_t height_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffile_5fprocessor_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ResizeImageRequest_class_data_;
// -------------------------------------------------------------------

class FileChunk final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:file_processor.FileChunk) */ {
 public:
  inline FileChunk() : FileChunk(nullptr) {}
  ~FileChunk() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FileChunk* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FileChunk));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FileChunk(::google::protobuf::internal::ConstantInitialized);

  inline FileChunk(const FileChunk& from) : FileChunk(nullptr, from) {}
  inline FileChunk(FileChunk&& from) noexcept
      : FileChunk(nullptr, ::std::move(from)) {}
  inline FileChunk& operator=(const FileChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileChunk& operator=(FileChunk&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileChunk& default_instance() {
    return *reinterpret_cast<const FileChunk*>(
        &_FileChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(FileChunk& a, FileChunk& b) { a.Swap(&b); }
  inline void Swap(FileChunk* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileChunk* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileChunk* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FileChunk>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileChunk& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FileChunk& from) { FileChunk::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FileChunk* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "file_processor.FileChunk"; }

 protected:
  explicit FileChunk(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  FileChunk(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const FileChunk& from);
  FileChunk(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, FileChunk&& from) noexcept
      : FileChunk(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kContentFieldNumber = 1,
    kFilenameFieldNumber = 2,
    kSuccessFieldNumber = 3,
    kIsLastChunkFieldNumber = 4,
  };
  // bytes content = 1;
  void clear_content() ;
  const ::std::string& content() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_content();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_content();
  void set_allocated_content(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_content() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_content(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_content();

  public:
  // string filename = 2;
  void clear_filename() ;
  const ::std::string& filename() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_filename();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_filename();
  void set_allocated_filename(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_filename() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_filename();

  public:
  // bool success = 3;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // bool is_last_chunk = 4;
  void clear_is_last_chunk() ;
  bool is_last_chunk() const;
  void set_is_last_chunk(bool value);

  private:
  bool _internal_is_last_chunk() const;
  void _internal_set_is_last_chunk(bool value);

  public:
  // @@protoc_insertion_point(class_scope:file_processor.FileChunk)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4,
                                   0, 41,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const FileChunk& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr content_;
    ::google::protobuf::internal::ArenaStringPtr filename_;
    bool success_;
    bool is_last_chunk_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffile_5fprocessor_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull FileChunk_class_data_;
// -------------------------------------------------------------------

class ImageStreamRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:file_processor.ImageStreamRequest) */ {
 public:
  inline ImageStreamRequest() : ImageStreamRequest(nullptr) {}
  ~ImageStreamRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ImageStreamRequest* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ImageStreamRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ImageStreamRequest(::google::protobuf::internal::ConstantInitialized);

  inline ImageStreamRequest(const ImageStreamRequest& from) : ImageStreamRequest(nullptr, from) {}
  inline ImageStreamRequest(ImageStreamRequest&& from) noexcept
      : ImageStreamRequest(nullptr, ::std::move(from)) {}
  inline ImageStreamRequest& operator=(const ImageStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageStreamRequest& operator=(ImageStreamRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageStreamRequest& default_instance() {
    return *reinterpret_cast<const ImageStreamRequest*>(
        &_ImageStreamRequest_default_instance_);
  }
  enum RequestTypeCase {
    kFormat = 1,
    kMetadata = 2,
    kChunk = 3,
    REQUEST_TYPE_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ImageStreamRequest& a, ImageStreamRequest& b) { a.Swap(&b); }
  inline void Swap(ImageStreamRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageStreamRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageStreamRequest* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ImageStreamRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ImageStreamRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ImageStreamRequest& from) { ImageStreamRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ImageStreamRequest* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "file_processor.ImageStreamRequest"; }

 protected:
  explicit ImageStreamRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ImageStreamRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ImageStreamRequest& from);
  ImageStreamRequest(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ImageStreamRequest&& from) noexcept
      : ImageStreamRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFormatFieldNumber = 1,
    kMetadataFieldNumber = 2,
    kChunkFieldNumber = 3,
  };
  // string format = 1;
  bool has_format() const;
  void clear_format() ;
  const ::std::string& format() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_format(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_format();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_format();
  void set_allocated_format(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_format() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_format(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_format();

  public:
  // .file_processor.ResizeImageRequest metadata = 2;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;

  public:
  void clear_metadata() ;
  const ::file_processor::ResizeImageRequest& metadata() const;
  [[nodiscard]] ::file_processor::ResizeImageRequest* PROTOBUF_NULLABLE release_metadata();
  ::file_processor::ResizeImageRequest* PROTOBUF_NONNULL mutable_metadata();
  void set_allocated_metadata(::file_processor::ResizeImageRequest* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_metadata(::file_processor::ResizeImageRequest* PROTOBUF_NULLABLE value);
  ::file_processor::ResizeImageRequest* PROTOBUF_NULLABLE unsafe_arena_release_metadata();

  private:
  const ::file_processor::ResizeImageRequest& _internal_metadata() const;
  ::file_processor::ResizeImageRequest* PROTOBUF_NONNULL _internal_mutable_metadata();

  public:
  // .file_processor.FileChunk chunk = 3;
  bool has_chunk() const;
  private:
  bool _internal_has_chunk() const;

  public:
  void clear_chunk() ;
  const ::file_processor::FileChunk& chunk() const;
  [[nodiscard]] ::file_processor::FileChunk* PROTOBUF_NULLABLE release_chunk();
  ::file_processor::FileChunk* PROTOBUF_NONNULL mutable_chunk();
  void set_allocated_chunk(::file_processor::FileChunk* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_chunk(::file_processor::FileChunk* PROTOBUF_NULLABLE value);
  ::file_processor::FileChunk* PROTOBUF_NULLABLE unsafe_arena_release_chunk();

  private:
  const ::file_processor::FileChunk& _internal_chunk() const;
  ::file_processor::FileChunk* PROTOBUF_NONNULL _internal_mutable_chunk();

  public:
  void clear_request_type();
  RequestTypeCase request_type_case() const;
  // @@protoc_insertion_point(class_scope:file_processor.ImageStreamRequest)
 private:
  class _Internal;
  void set_has_format();
  void set_has_metadata();
  void set_has_chunk();
  inline bool has_request_type() const;
  inline void clear_has_request_type();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 3,
                                   2, 48,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ImageStreamRequest& from_msg);
    union RequestTypeUnion {
      constexpr RequestTypeUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr format_;
      ::file_processor::ResizeImageRequest* PROTOBUF_NULLABLE metadata_;
      ::file_processor::FileChunk* PROTOBUF_NULLABLE chunk_;
    } request_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffile_5fprocessor_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ImageStreamRequest_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// FileChunk

// bytes content = 1;
inline void FileChunk::clear_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& FileChunk::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_processor.FileChunk.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void FileChunk::set_content(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.content_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:file_processor.FileChunk.content)
}
inline ::std::string* PROTOBUF_NONNULL FileChunk::mutable_content()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:file_processor.FileChunk.content)
  return _s;
}
inline const ::std::string& FileChunk::_internal_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_.Get();
}
inline void FileChunk::_internal_set_content(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.content_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL FileChunk::_internal_mutable_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.content_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE FileChunk::release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_processor.FileChunk.content)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.content_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.content_.Set("", GetArena());
  }
  return released;
}
inline void FileChunk::set_allocated_content(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.content_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:file_processor.FileChunk.content)
}

// string filename = 2;
inline void FileChunk::clear_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& FileChunk::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_processor.FileChunk.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void FileChunk::set_filename(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:file_processor.FileChunk.filename)
}
inline ::std::string* PROTOBUF_NONNULL FileChunk::mutable_filename()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:file_processor.FileChunk.filename)
  return _s;
}
inline const ::std::string& FileChunk::_internal_filename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filename_.Get();
}
inline void FileChunk::_internal_set_filename(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.filename_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL FileChunk::_internal_mutable_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.filename_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE FileChunk::release_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_processor.FileChunk.filename)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.filename_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.filename_.Set("", GetArena());
  }
  return released;
}
inline void FileChunk::set_allocated_filename(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.filename_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:file_processor.FileChunk.filename)
}

// bool success = 3;
inline void FileChunk::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool FileChunk::success() const {
  // @@protoc_insertion_point(field_get:file_processor.FileChunk.success)
  return _internal_success();
}
inline void FileChunk::set_success(bool value) {
  _internal_set_success(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:file_processor.FileChunk.success)
}
inline bool FileChunk::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void FileChunk::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// bool is_last_chunk = 4;
inline void FileChunk::clear_is_last_chunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_last_chunk_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool FileChunk::is_last_chunk() const {
  // @@protoc_insertion_point(field_get:file_processor.FileChunk.is_last_chunk)
  return _internal_is_last_chunk();
}
inline void FileChunk::set_is_last_chunk(bool value) {
  _internal_set_is_last_chunk(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:file_processor.FileChunk.is_last_chunk)
}
inline bool FileChunk::_internal_is_last_chunk() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_last_chunk_;
}
inline void FileChunk::_internal_set_is_last_chunk(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_last_chunk_ = value;
}

// -------------------------------------------------------------------

// ResizeImageRequest

// int32 width = 1;
inline void ResizeImageRequest::clear_width() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t ResizeImageRequest::width() const {
  // @@protoc_insertion_point(field_get:file_processor.ResizeImageRequest.width)
  return _internal_width();
}
inline void ResizeImageRequest::set_width(::int32_t value) {
  _internal_set_width(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:file_processor.ResizeImageRequest.width)
}
inline ::int32_t ResizeImageRequest::_internal_width() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.width_;
}
inline void ResizeImageRequest::_internal_set_width(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.width_ = value;
}

// int32 height = 2;
inline void ResizeImageRequest::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t ResizeImageRequest::height() const {
  // @@protoc_insertion_point(field_get:file_processor.ResizeImageRequest.height)
  return _internal_height();
}
inline void ResizeImageRequest::set_height(::int32_t value) {
  _internal_set_height(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:file_processor.ResizeImageRequest.height)
}
inline ::int32_t ResizeImageRequest::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void ResizeImageRequest::_internal_set_height(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// -------------------------------------------------------------------

// ImageStreamRequest

// string format = 1;
inline bool ImageStreamRequest::has_format() const {
  return request_type_case() == kFormat;
}
inline void ImageStreamRequest::set_has_format() {
  _impl_._oneof_case_[0] = kFormat;
}
inline void ImageStreamRequest::clear_format() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (request_type_case() == kFormat) {
    _impl_.request_type_.format_.Destroy();
    clear_has_request_type();
  }
}
inline const ::std::string& ImageStreamRequest::format() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_processor.ImageStreamRequest.format)
  return _internal_format();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ImageStreamRequest::set_format(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (request_type_case() != kFormat) {
    clear_request_type();

    set_has_format();
    _impl_.request_type_.format_.InitDefault();
  }
  _impl_.request_type_.format_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:file_processor.ImageStreamRequest.format)
}
inline ::std::string* PROTOBUF_NONNULL ImageStreamRequest::mutable_format()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_format();
  // @@protoc_insertion_point(field_mutable:file_processor.ImageStreamRequest.format)
  return _s;
}
inline const ::std::string& ImageStreamRequest::_internal_format() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (request_type_case() != kFormat) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.request_type_.format_.Get();
}
inline void ImageStreamRequest::_internal_set_format(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (request_type_case() != kFormat) {
    clear_request_type();

    set_has_format();
    _impl_.request_type_.format_.InitDefault();
  }
  _impl_.request_type_.format_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ImageStreamRequest::_internal_mutable_format() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (request_type_case() != kFormat) {
    clear_request_type();

    set_has_format();
    _impl_.request_type_.format_.InitDefault();
  }
  return _impl_.request_type_.format_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ImageStreamRequest::release_format() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:file_processor.ImageStreamRequest.format)
  if (request_type_case() != kFormat) {
    return nullptr;
  }
  clear_has_request_type();
  return _impl_.request_type_.format_.Release();
}
inline void ImageStreamRequest::set_allocated_format(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_request_type()) {
    clear_request_type();
  }
  if (value != nullptr) {
    set_has_format();
    _impl_.request_type_.format_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:file_processor.ImageStreamRequest.format)
}

// .file_processor.ResizeImageRequest metadata = 2;
inline bool ImageStreamRequest::has_metadata() const {
  return request_type_case() == kMetadata;
}
inline bool ImageStreamRequest::_internal_has_metadata() const {
  return request_type_case() == kMetadata;
}
inline void ImageStreamRequest::set_has_metadata() {
  _impl_._oneof_case_[0] = kMetadata;
}
inline void ImageStreamRequest::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (request_type_case() == kMetadata) {
    if (GetArena() == nullptr) {
      delete _impl_.request_type_.metadata_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.request_type_.metadata_);
    }
    clear_has_request_type();
  }
}
inline ::file_processor::ResizeImageRequest* PROTOBUF_NULLABLE ImageStreamRequest::release_metadata() {
  // @@protoc_insertion_point(field_release:file_processor.ImageStreamRequest.metadata)
  if (request_type_case() == kMetadata) {
    clear_has_request_type();
    auto* temp = _impl_.request_type_.metadata_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_type_.metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::file_processor::ResizeImageRequest& ImageStreamRequest::_internal_metadata() const {
  return request_type_case() == kMetadata ? *_impl_.request_type_.metadata_ : reinterpret_cast<::file_processor::ResizeImageRequest&>(::file_processor::_ResizeImageRequest_default_instance_);
}
inline const ::file_processor::ResizeImageRequest& ImageStreamRequest::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_processor.ImageStreamRequest.metadata)
  return _internal_metadata();
}
inline ::file_processor::ResizeImageRequest* PROTOBUF_NULLABLE ImageStreamRequest::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:file_processor.ImageStreamRequest.metadata)
  if (request_type_case() == kMetadata) {
    clear_has_request_type();
    auto* temp = _impl_.request_type_.metadata_;
    _impl_.request_type_.metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ImageStreamRequest::unsafe_arena_set_allocated_metadata(
    ::file_processor::ResizeImageRequest* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request_type();
  if (value) {
    set_has_metadata();
    _impl_.request_type_.metadata_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:file_processor.ImageStreamRequest.metadata)
}
inline ::file_processor::ResizeImageRequest* PROTOBUF_NONNULL ImageStreamRequest::_internal_mutable_metadata() {
  if (request_type_case() != kMetadata) {
    clear_request_type();
    set_has_metadata();
    _impl_.request_type_.metadata_ = 
        ::google::protobuf::Message::DefaultConstruct<::file_processor::ResizeImageRequest>(GetArena());
  }
  return _impl_.request_type_.metadata_;
}
inline ::file_processor::ResizeImageRequest* PROTOBUF_NONNULL ImageStreamRequest::mutable_metadata()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::file_processor::ResizeImageRequest* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:file_processor.ImageStreamRequest.metadata)
  return _msg;
}

// .file_processor.FileChunk chunk = 3;
inline bool ImageStreamRequest::has_chunk() const {
  return request_type_case() == kChunk;
}
inline bool ImageStreamRequest::_internal_has_chunk() const {
  return request_type_case() == kChunk;
}
inline void ImageStreamRequest::set_has_chunk() {
  _impl_._oneof_case_[0] = kChunk;
}
inline void ImageStreamRequest::clear_chunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (request_type_case() == kChunk) {
    if (GetArena() == nullptr) {
      delete _impl_.request_type_.chunk_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.request_type_.chunk_);
    }
    clear_has_request_type();
  }
}
inline ::file_processor::FileChunk* PROTOBUF_NULLABLE ImageStreamRequest::release_chunk() {
  // @@protoc_insertion_point(field_release:file_processor.ImageStreamRequest.chunk)
  if (request_type_case() == kChunk) {
    clear_has_request_type();
    auto* temp = _impl_.request_type_.chunk_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_type_.chunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::file_processor::FileChunk& ImageStreamRequest::_internal_chunk() const {
  return request_type_case() == kChunk ? *_impl_.request_type_.chunk_ : reinterpret_cast<::file_processor::FileChunk&>(::file_processor::_FileChunk_default_instance_);
}
inline const ::file_processor::FileChunk& ImageStreamRequest::chunk() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:file_processor.ImageStreamRequest.chunk)
  return _internal_chunk();
}
inline ::file_processor::FileChunk* PROTOBUF_NULLABLE ImageStreamRequest::unsafe_arena_release_chunk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:file_processor.ImageStreamRequest.chunk)
  if (request_type_case() == kChunk) {
    clear_has_request_type();
    auto* temp = _impl_.request_type_.chunk_;
    _impl_.request_type_.chunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ImageStreamRequest::unsafe_arena_set_allocated_chunk(
    ::file_processor::FileChunk* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request_type();
  if (value) {
    set_has_chunk();
    _impl_.request_type_.chunk_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:file_processor.ImageStreamRequest.chunk)
}
inline ::file_processor::FileChunk* PROTOBUF_NONNULL ImageStreamRequest::_internal_mutable_chunk() {
  if (request_type_case() != kChunk) {
    clear_request_type();
    set_has_chunk();
    _impl_.request_type_.chunk_ = 
        ::google::protobuf::Message::DefaultConstruct<::file_processor::FileChunk>(GetArena());
  }
  return _impl_.request_type_.chunk_;
}
inline ::file_processor::FileChunk* PROTOBUF_NONNULL ImageStreamRequest::mutable_chunk()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::file_processor::FileChunk* _msg = _internal_mutable_chunk();
  // @@protoc_insertion_point(field_mutable:file_processor.ImageStreamRequest.chunk)
  return _msg;
}

inline bool ImageStreamRequest::has_request_type() const {
  return request_type_case() != REQUEST_TYPE_NOT_SET;
}
inline void ImageStreamRequest::clear_has_request_type() {
  _impl_._oneof_case_[0] = REQUEST_TYPE_NOT_SET;
}
inline ImageStreamRequest::RequestTypeCase ImageStreamRequest::request_type_case() const {
  return ImageStreamRequest::RequestTypeCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace file_processor


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // proto_2ffile_5fprocessor_2eproto_2epb_2eh
